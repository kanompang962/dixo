name: CI/CD Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏´‡∏ô‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            frontend:
              - 'web/**'
            backend:
              - 'api/**'
  # Frontend Job
  frontend:
    name: Frontend (Angular)
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install Angular dependencies
        working-directory: ./web
        run: npm install --legacy-peer-deps  # üëà ‡πÄ‡∏û‡∏¥‡πà‡∏° --legacy-peer-deps
      - name: Build Angular
        working-directory: ./web
        run: npm run build -- --configuration production
      - name: Test Angular
        working-directory: ./web
        run: npm test  # üëà ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å --watch=false --browsers=ChromeHeadless

 # Backend Job
  backend:
    name: Backend (.NET)
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Restore .NET dependencies
        working-directory: ./api
        run: dotnet restore
      - name: Build .NET
        working-directory: ./api
        run: dotnet build --no-restore
      - name: Test .NET
        working-directory: ./api
        run: dotnet test --no-build --verbosity normal

  build-and-push-docker:
    needs: [changes, frontend, backend]
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push Angular Docker image
        if: needs.changes.outputs.frontend == 'true' && (needs.frontend.result == 'success' || needs.frontend.result == 'skipped')
        working-directory: ./web
        run: |
          docker build -t kanompang962/dixo-web:latest .
          docker push kanompang962/dixo-web:latest

      - name: Build and push .NET Docker image
        if: needs.changes.outputs.backend == 'true' && (needs.backend.result == 'success' || needs.backend.result == 'skipped')
        working-directory: ./api
        run: |
          docker build -t kanompang962/dixo-api:latest .
          docker push kanompang962/dixo-api:latest

  deploy:
    needs: [changes, build-and-push-docker]   # ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ changes ‡∏î‡πâ‡∏ß‡∏¢
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main' && (needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Copy docker-compose to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "docker-compose.yml"
          target: "/home/${{ secrets.VPS_USERNAME }}/dixo"
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /home/${{ secrets.VPS_USERNAME }}/dixo
            export DB_CONNECTION_STRING="${{ secrets.DB_CONNECTION_STRING }}"

            if [ "${{ needs.changes.outputs.frontend }}" = "true" ]; then
              echo "Deploying frontend..."
              docker-compose pull web
              docker-compose up -d web
            fi

            if [ "${{ needs.changes.outputs.backend }}" = "true" ]; then
              echo "Deploying backend..."
              docker-compose pull api
              docker-compose up -d api
            fi